digraph "stack&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=8,labelfontname=Helvetica,labelfontsize=8];
  node [fontname=Helvetica,fontsize=8,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">stack&lt; T &gt;</TD></TR>
<HR/>
<TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">&nbsp;</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void clear()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void emplace(Args &amp;&amp;... _args)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool empty() const noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">const T &amp; front() const noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">T &amp; front() noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void pop()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void push(const T &amp;_value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void push(T &amp;&amp;_value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">size_t size() const noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">const T &amp; top() const noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">T &amp; top() noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack(std::pmr::memory_resource *_resource=std::pmr::get_default_resource())<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack(size_t _capacity, std::pmr::memory_resource *_resource=std::pmr::get_default_resource())<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack(const stack &amp;_other)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack &amp; operator=(const stack &amp;_other)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack(stack &amp;&amp;_other) noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">*</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">stack &amp; operator=(stack &amp;&amp;_other) noexcept<BR ALIGN="LEFT"/></TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Implementation of a First-In-Last-Out (FILO) container."];
}
